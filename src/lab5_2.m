%%% 5_2
%~ Построить и обучить сеть прямого распространения с распределенным запаздыванием,
%~ которая будет выполнять распознавание динамического образа.
clear;
clc;

%% 2.1
%~ Входная последовательность обучающего множества состоит из комбинации
%~ основного сигнала (p1) и сигнала, подлежащего распознаванию (p2).
%~ Значениям основного сигнала соответствуют значению −1 целевого выхода,
%~ значения сигнала p2 — 1 целевого выхода.
%~ p1 (k) = sin(4πk), t1 (k) = −1, k ∈ [0, 1] c шагом h = 0.01
%~ p2 (k) = g(k), t2 (k) = 1, k ∈ [a2 , b2 ]
%~ Функция g(k) определяется вариантом задания.
%~ Длительность основного сигнала задается набором чисел R = {r1 , r2 , r3 }.
%~ Значения R определяются вариантом задания. Входное множество формируется по формуле
%~ P = [repmat(p1 , 1, r1 ), p2 , repmat(p1 , 1, r2 ), p2 , repmat(p1 , 1, r3 ), p2 ]
%~ T = [repmat(t1 , 1, r1 ), t2 , repmat(t1 , 1, r2 ), t2 , repmat(t1 , 1, r3 ), t2 ]
%~ Преобразовать обучающее множество с помощью функции con2seq.
k1 = 0:0.01:1;
n1 = size(k1, 2);
t1 = -ones(1, n1);
p1 = sin(4*pi*k1);
k2 = 0.92:0.01:4.07;
n2 = size(k2, 2);
t2 = ones(1, n2);
p2 = cos(-2*k2.^2 + 7*k2);

R = [2 4 7];

P = [repmat(p1,1,R(1)), p2, repmat(p1,1,R(2)), p2, repmat(p1,1,R(3)), p2];
T = [repmat(t1,1,R(1)), t2, repmat(t1,1,R(2)), t2, repmat(t1,1,R(3)), t2];


%% 2.2
%~ Создать сеть с помощью функции distdelaynet. Задать задержки от 0 до 4 для первого и второго слоев.
%~ Число нейронов скрытого слоя задать равным 8. Отобразить структуру сети c помощью функций display.
net = distdelaynet({0:4, 0:4}, 8, 'trainlm');

display(net);
view(net);


%% 2.3
%~ С помощью функции preparets сформировать массивы ячеек для функции обучения,
%~ содержащие обучающее множество и значения для инициализации задержек двух слоев (P,T,Pi,Ai соответственно).
%~ Если при выполнении заданий используется версия MATLAB, которая не поддерживает эту функцию,
%~ то обучать и выполнять расчет выходов сети без инициализации задержек.
[Ps,Pi,Ai,Ts] = preparets(net,con2seq(P),con2seq(T));


%% 2.4
%~ Задать параметры обучения: число эпох обучения (net.trainParam.epochs) равным 100,
%~ предельное значение критерия обучения (net.trainParam.goal) равным 10^-5.
net.trainParam.epochs = 10;
net.trainParam.goal = 1e-5;


%% 2.5
%~ Произвести обучение сети с помощью Байесовского метода обучения trainbr.
%~ Если необходимо, то произвести обучение несколько раз.
%~ Если результаты неудовлетворительные, то изменить число нейронов,
%~ либо использовать метод Левенберга-Марквардта(trainlm) для обучения сети.
%~ Занести в отчет весовые коэффициенты и смещения для двух слоев после обучения.
%~ Занести в отчет графики Performance, Training State, а также окно Neural Network Training.
net = train(net, Ps, Ts, Pi, Ai);
% plotperform(net);

%% 2.6
%~ Занести в отчет величину ошибки обучения с помощью функций sqrt(mse(e)),
%~ где e задает разность между выходными значениями сети и эталонными значениями обучающего множества.
out = sim(net, Ps, Pi, Ai, Ts);
err = cell2mat(out) - cell2mat(Ts);
sqrt_mse = sqrt(mse(err));


%% 2.7
%~ Отобразить на графике эталонные значения и предсказанные сетью,
%~ также отобразить точки заданного интервала. С помощью функции legend подписать кривые.
figure;
title('etalon and predicated values');
xlabel('t');
ylabel('y');
hold on;
plot(cell2mat(out), 'b'), grid;
plot(cell2mat(Ts), 'g');
hold off;
legend('output', 'etalon');

waitforbuttonpress

%% 2.8
%~ Отобразить ошибку обучения. На графике отобразить сетку и точки заданного интервала.
figure;
title('error');
xlabel('t');
ylabel('y');
hold on;
plot(err, 'b'),grid;
hold off;
legend('error');

waitforbuttonpress

%% 2.9
%~ Для проверки качества распознавания сформировать новое обучающее множество,
%~ изменив одно из значений R = {r1 , r2 , r3 }.
%~ Рассчитать выходы сети для измененной входной последовательности.
R = [2 4 6];

P = [repmat(p1,1,R(1)), p2, repmat(p1,1,R(2)), p2, repmat(p1,1,R(3)), p2];
T = [repmat(t1,1,R(1)), t2, repmat(t1,1,R(2)), t2, repmat(t1,1,R(3)), t2];

[Ps,Pi,Ai,Ts] = preparets(net,con2seq(P),con2seq(T));
out = sim(net, Ps, Pi, Ai, Ts);

err = cell2mat(out) - cell2mat(Ts);
sqrt_mse = sqrt(mse(err))


%% 2.10
%~ Отобразить на графике новые эталонные значения и предсказанные сетью,
%~ также отобразить точки заданного интервала. С помощью функции legend подписать кривые.
figure;
title('etalon and predicated values');
xlabel('t');
ylabel('y');
hold on;
plot(cell2mat(out), 'b'), grid;
plot(cell2mat(Ts), '-g');
hold off;
legend('output', 'etalon');


%% 2.11
%~ Отобразить ошибку распознавания. На графике отобразить сетку и точки заданного интервала.
figure;
xlabel('t');
ylabel('y');
hold on;
plot(err, 'b'), grid;
legend('error');

waitforbuttonpress
quit

