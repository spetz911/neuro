%%% 8_1
%~ Для первой обучающей выборки из лабораторной работы No 3 построить LVQ-сеть,
%~ которая будет правильно относить точки к двум классам.
%~ Классы не являются линейно разделимыми, но представляют собой выпуклое множество.



%% 1.1
%~ Построить вектор индексов классов с помощью функции ind2vec.
%~ Перед этим в векторе, содержащим распределение по классам заменить −1 на 1, а 1 на 2.
%~ Создать сеть с помощью функции newlvq. Число нейронов конкурентного слоя задать равным 12.
%~ Задать скорость обучения равной 0.1. При создании сети задать процентную долю принадлежности
%~ входных векторов к классу с индексом 1 и классу с индексом 2. Отобразить структуру сети.
P = [0.1 0.6; 0 1.4; -0.9 -1.2; -1.2 -1.4; -0.3 -0.2; -0.5 0.7; 1.2 0.9; -1 1.4; 0.5 -1.1; 0 -1.3; 1.3 0; 1 -0.1]';


T = [-1 -1 1 1 1 1 -1 1 1 1 -1 1];
T(T==1)=2;
T(T==-1)=1;

T=ind2vec(T);
net=newlvq(minmax(P),12,[8/12 4/12],0.1);

%% 1.2
%~ Задать число эпох обучения net.trainP aram.epochs равным 300.
%~ Произвести обучение сети с помощью метода, заданного по умолчанию.
%~ Если необходимо, то произвести обучение несколько раз.
%~ Если результаты классификации неудовлетворительные,
%~ то уменьшить число число нейронов конкурентного слоя(число кластеров).
%~ Занести в отчет весовые коэффициенты двух слоев после обучения.
%~ Занести в отчет график Performance и окно Neural Network Training.

net.trainparam.epochs = 300;
net = train(net,P,T);
rP = rands(2,5);
res=sim(net,In);

%% 1.3
%~ Проверить качество обучения: случайным образом задать 5 точек и классифицировать их.
%~ Отобразить сетку, дополнительные точки, обучающую выборку и результаты распределения по классам.
%~ Результаты занести в отчет. Перед отображением преобразовать выход сети с помощью функции vec2ind,
%~ а также преобразовать коды классов для отображения: 1 заменить на 0, а 2 на 1. Для отображения использовать функцию plotpv.



